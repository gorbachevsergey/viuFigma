{"remainingRequest":"/home/sergei/Рабочий стол/JS/helloVue/hello-world/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/sergei/Рабочий стол/JS/helloVue/hello-world/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/sergei/Рабочий стол/JS/helloVue/hello-world/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/sergei/Рабочий стол/JS/helloVue/hello-world/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/home/sergei/Рабочий стол/JS/helloVue/hello-world/src/App.vue","mtime":1628250493801},{"path":"/home/sergei/Рабочий стол/JS/helloVue/hello-world/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sergei/Рабочий стол/JS/helloVue/hello-world/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/sergei/Рабочий стол/JS/helloVue/hello-world/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sergei/Рабочий стол/JS/helloVue/hello-world/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}